-----------------------------------------------------------------------------------
# 12.0 Register View Controller
    (1) 비디오 조회수
    (2) 템플릿을 렌더링하지 않는 views를 만든다 (api view)
    (3) 요즘은 프론트엔트와 백엔드를 구분해서 따로 만든다
        지금하는 방식은 SSR(Server Side Rendering) 방식으로 서버가 템플릿을 렌더링하는 일까지 처리한다
    (4) API는 프론트엔드와 백엔드가 서버를 통해 통신하는 방법을 말한다
        백엔드가 템플릿을 렌더링하지 않을 때, 프론트와 백엔드가 통신하는 방법
    (5) apiRouter.js 파일을 생성한다
    (6) 서버에서 라우터를 사용한다
    (7) 요청을 보내더라도 URL을 바꾸지 않고 템플릿을 렌더링하지 않는다
    (8) 라우터에서 post 방식으로 요청을 보내고 해당 컨트롤러를 작성한다
    (9) 컨트롤러
        1. video id를 가지고 video를 가져온다
        2. video의 meta views 를 업데이트한다
    (10) 라우터에 설정한 URL을 프론트엔드에서 호출한다
    (11) URL이 바뀌지 않아도 페이지에서 변화가 생긴다 (interactivity)
    (12) 클라이언트에서 자바스크립트로 URL에 요청한다
-----------------------------------------------------------------------------------
# 12.1 Register View Event
    (1) 유저가 비디오 시청을 끝냈을 때 생기는 이벤트를 추가한다
        ended 이밴트를 사용
    (2) fetch() 를 사용해서 나의 api에 요청을 보낸다 ("/")만 쓰면 내 웹사이트에 요청을 보낼 수 있다
        1. fetch("/api/videos/id/view"); 형태로 요청을 보낸다
            하지만 id가 뭔지 handleEnded function은 알지 못한다
            따라서 템플릿을 렌더링하는 pug에게 비디오에 대한 정보를 남기라고 말해줘야한다
                프론트엔드에서 자바스크립트가 알 수 있도록
        2. data attribute를 이용해서 직접 데이터를 만들어서 HTML에 저장한다
    (3) HTML element에 커스텀 데이터를 어떻게 저장하는가
        data attribute를 사용해서 pug가 렌더링할 때 데이터를 저장하도록 만들 수 있다
            백엔드와 프로트엔드가 데이터를 공유하는 가장 쉬운 방법이다
    (4) 그렇게 id를 가져와서 fetch하면 GET 요청을 보내게 된다
            POST로 받게 되어있기 때문에 method 설정을 해줘야한다
-----------------------------------------------------------------------------------
# 12.2 Conclusions
    (1) res.status()만 하면 응답에 상태 코드를 추가하기만 했을뿐이다
            따라서 sendStatus() 를 사용한다
                연결을 끊을 수 있도록
    (2) status 코드는 추후에 댓글 기능을 위해서이다
-----------------------------------------------------------------------------------