-----------------------------------------------------------------------------------
# 8.0 Edit Profile GET
    (1) GET, POST edit 라우터와 컨트롤러 만들기
    (2) /edit url에 접근 가능하게 하기
    (3) Edit 템플릿을 만든다.
        수정하는 것이기 때문에 기존의 값이 적혀 있어야 한다
            template로 user object를 가져온다
                컨트롤러에서 세션안에 유저 정보를 가져와도 되지만 Local Middleware을 쓸 수 있다
    (4) 로그인 되지 않은 사용자가 users/edit 페이지로 오면 어떻게 할까?
        1. loggedInUser에 접근하려는데 로그인 되어 있지 않으면 생기는 에러
            변수에 빈 오브젝트를 보내주면 된다
                res.locals.loggedInUser = req.session.user || {};
        2. 로그인 돼 있지 않은 사람들은 접근 할 수 없어야한다
            url이 작동하지 않고, redirect해 줘야 한다
                몇몇 route를 보호하는 middleware가 필요
-----------------------------------------------------------------------------------
# 8.1 Protector and Public Middlewares
    (1) 로그인 하지 않은 사람들이, 내가 보호하려는 페이지에 가는걸 막는다
    (2) middlewares 파일에 protectorMiddleware 를 만든다
        사용자가 로그인 돼 있지 않은 걸 확인하면, 로그인 페이지로 redirect한다
            로그인하면 백엔드의 세션에 저장되는걸 이용해서 분기문을 만든다
    (3) 로그인 돼 있지 않은 사람들만 접근 할 수 있게하는 middleware도 만든다
    (4) 해당하는 라우터에 만든 middleware를 넣어준다
-----------------------------------------------------------------------------------
# 8.2 Edit Profile POST part One
    (1) vidoe라우터도 로그인 시에만 접근가능 할 페이지들에게 middleware 적용시킴
        나중에 video model과 user model을 연결하기 때문 (비디오의 소유자만이 비디오를 수정할 수 있게 하기 위함)
    (2) Edit Profile에서 POST받은 form 정보를 body에서 가져오고 db를 수정해준다
    (3) db의 유저를 업데이트해도 session을 업데이트 해주지 않으면 템플릿에 적용되지 않는다
        session과 DB는 연결되있지 않기 때문
-----------------------------------------------------------------------------------
# 8.3 Edit Profile POST part Two
    (1) 저번 강의에서는 DB에서의 업데이트가 프론트엔드에 반영되지 않았다
        프론트엔드는 session으로부터 정보를 얻기 때문
    (2) 현재 session은 로그인할 때 한번 작성되고있다.
        그래서 DB에 있는 user정보를 업데이트해도, session은 업데이트 되지 않는다
    (3) session도 함께 업데이트 해준다
        이렇게 DB랑 req.session을 독같이 유지할 수 있다
    (4) 이렇게 수동으로 하는방법 외에 updatedUser를 만드는 방법도 있다
        findByIdAndUpdate는 update 되기 전의 데이터를 return 해주고
        new:true를 설정해주면 findByIdAndUpdate가 업데이트된 데이터를 return 해준다
    (5) 문제는 만약 username이나 email을 바꾸려는데 이미 있는 username이나 email이라면
        이미 있는 username이나 email이면 업데이트 할 수 없게 해줘야 한다
            body에 있는 email과 username이 session.user에 있는 username과 email이랑 다른지 확인해본다
-----------------------------------------------------------------------------------
# 8.4 Change Password part One
    (1) edit-profile 템플릿에 a(href="chage-password") 추가
        url 작동방식에 주의
    (2) 라우터, 컨트롤러 생성
    (3) 템플릿 생성
    (4) 깃허브를 통해 계정을 만든 경우에는 비밀번호 변경을 볼 수 없어야 한다
        방법 1. userController의 getChangePassword에서 로그인된 사용자의 정보를 확인 후 소셜Only라면 redirect 시킴
        방법 2. form을 볼 수 는 있지만, 사용할 수 없게 함
-----------------------------------------------------------------------------------
# 8.5 Change Password part Two
    (1) 깃허브로 로그인하지 않은 사람들을 위한 middleware
        깃허브로 로그인 하면 무언가를 보여주지 않거나, 보여주거나 하는 middleware 등등
    (2) 비밀번호 변경
        1. session에서 현재 로그인된 사용자를 확인하고, form에서 정보를 가져온다
        2. 새 비밀번호와 비밀번호 확인이 일치하는지 확인
        3. 현재 비밀번호가 일치하는지 확인
        4. 모든게 일치한다면, 비밀번호 변경
    (2) pre save 함수로 password를 해싱하기 위해서 user.save() 를 사용할 수 있다
        그러기위해선 user를 먼저 찾아야 한다
        유저가 누군지는 session에서 정보를 가져와서 이미 알고있지만 save()함수를 써야하니까 session에서 로그인된 user를 찾아야한다
        user.save()가 userSchema.pre("save", ) 를 작동시킴
    (3) session을 업데이트해주지 않으면 안돼
        session에 있는 hash된 비밀번호가 기존 비밀번호와 일치하는지 확인하고 있다
        따라서 session을 업데이트 해줘야함
    (4) DB와 session 두 개의 저장소를 사용하고 있기 때문에, session에서 정보를 받으면, 업데이트도 해줘야 한다
-----------------------------------------------------------------------------------
# 8.6 File Uploads part One
    (1) 업로드 하기 위해서는 우선 로그인한다
    (2) 프로필에 
        label(for="avatar") Avatar
        input(type="file", id="avatar", name="avatar", accept="image/*") 추가
    (3) 나를 도와줄 middleware를 사용해야 한다
        multer
        multer는 내가 파일을 업로드 할 수 있게 해준다
        npm i multer 로 설치
        1. multer에게서 도움을 받기 위해선 form을 multipart form으로 만들어야 한다
            form에다가 enctype="multipart/form-data" 를 추가한다
                form이 다르게 encode 될 거란 의미
        2. middleware를 만들어 줘야 한다
            https://www.npmjs.com/package/multer(참고)
            export const uploadFiles = multer({
                dest: "uploads/",
            });
                사용자가 보낸 파일을 uploads 폴더에 저장하도록 설정된 middleware
        3. 이렇게 만든 middleware를 route에서 사용한다
            파일을 업로드하는 부분에서 milldeware를 실행한 다음, postEdit 을 실행
    (4) multer는 input으로 avatar 파일을 받아서, 지정한 폴더에 저장한 다음, 
        그 파일 정보를 postEdit에 전달해 준다
    (5) 이렇게 하면 request에 req.file이 추가된다
    (6) 내가 postEidt 컨트롤러에서 req.file을 사용할 수 있는건 userRouter에,
        postEdit 전에 Multer를 사용하고 있기 때문
-----------------------------------------------------------------------------------
# 8.7 File Uploads part Two
    (1) 컨트롤러 마무리
        req.file이 생겼고, 여기에서 경로를 얻어야 한다
    (2) 절대 DB에 파일을 저장하면 안된다!!
        폴더에 파일을 저장하고 DB에는 파일의 위치만 저장한다
    (3) 이미지 파일을 사용하기
-----------------------------------------------------------------------------------
# 8.8 Static Files and Recap
    (1) 브라우저가 uploads 폴더에 있는 내용을 볼 수 있게 해준다
        브라우저가 서버에 있는 파일에 접근할 수 없으니까, 내가 브라우저한테 어디로 가야 하는지 얘기해줘야 한다
        브라우저가 모든 폴더나 파일을 보는건 보안항 좋지 않기 떄문에 브라우저가 어떤 페이지와 폴더를 볼 수 있는지 알려줘야 한다
    (2) 이것을 위해서 static files serving 이라는 것을 활성화 한다
        폴더 전체를 브라우저에게 노출 시킨다는 의미
    (3) 먼저 라우터를 생성
        app.use("/uploads", express.static("uploads"));
    (4) Recap
        1. 서버로 파일을 보내고 싶었다
        2. 먼저 views의 edit-profile에 파일을 받는 input을 만들었다
        3. 서버에 이미지를 저장하고 그 이미지에 대한 정보를 얻는다
        4. 그걸위해 multer라는 middleware를 사용했다
            form으로 보낸 파일을 업로드 해준다 (이외에도 여러 기능이 존재)
        5. routers에서 multer를 먼저 사용해주고, 그 다음 controller를 사용하면, Multer의 마법이 시작된다
            여러 기능을 수행하고, 그 파일에 관한 정보를 받아서, postEdit에 전달해준다
        6. 사용한 controller에서 req.file을 사용할 수 있다
        7. avatarUrl을 업데이트 할건데 유저가 파일을 보내지 않을 수도 있다
            따라서 확인 작업을 거친다
        8. 브라우저가 아직 파일의 존재를 모른다
            서버가 /uploads/~~ 라는 url을 이해하도록 설정되지 않았기 떄문
        9. 따라서 Express에게 만약 누군가 /uploads로 가려고 한다면, uploads 폴더의 내용을 보여달라고 
            express.static을 이용해 라우터에서 설정해줬다
    10. 문제점
            파일을 서버에 저장한다
            서버는 계속 종료되고 다시 시작하는걸 반복하기 때문에, 그 전 서버에 저장돼 있던 파일들이 날아간다
            파일을 서버에 저장하는 것이 아닌 다른 곳에 저장할것이다
                서버가 사라졌다 다시 돌아와도 파일은 그대로 있도록
            DB에는 파일 자체가 아니라, 파일의 위치를 저장한다
-----------------------------------------------------------------------------------
# 8.9 Video Upload
    (1) label 은 id 를 활용하기에 파일을 올릴 input 'id' 넣어준다
    (2) multer Middleware를 사용할때 single("")에 input의 id를 넣어줘야 한다
    (3) multer에 fileSize라는 것이 있다 
        limits: {fileSize: } 단위는 bytes
        이걸 이용해 'avatar'파일의 업로드 용량을 3MB 이하로 하고, 'video'파일의 업로드 용량을 10MB 이하로 제한한다
    (4) 컨트롤러에서 파일을 받는다
    (5) 파일의 'path'를 db에 저장한다
    (6) multer 를 사용해서 파일을 업로드하려 한다면, form의 encoding type을 바꿔줘야 한다
        enctype="multipart/form-data"
    (7) 비디오를 보여준다
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
