#7 USER AUTHENTICATION
-----------------------------------------------------------------------------------
# 7.0 Create Account part One
    (1) 지난 Section에서 연습한 것들을 모두 사용하고, 여기에 인증(Authentication)을 추가한다
    (2) 유저 CRUD를 만든다
        Schema에 unique를 추가했음
-----------------------------------------------------------------------------------
# 7.1 Create Account part Two
    (1) DeprecationWarning은 만든지 오래된 기능을 쓰고 있으니까 업데이트 하라고 알려주는 것
    (2) post로 받아보면 db상에 password가 그대로 노츨된다
        보안 상 아주 좋지 못함
    (3) password를 봐도 무슨 말인지 모르게 만들어야 한다.
        password hashing
            원래 password를 알지 못해도 password가 일치하는지 안하는지 알 수 있다.
-----------------------------------------------------------------------------------
# 7.2 Create Account part Three
    (1) DB에 password를 저장하면 안된다.
    (2) 해싱은 일방향이라 되돌릴 수 있다
        입력 값으로 출력 앖을 알아내는데, 출력 값으로 입력 값을 알아낼 수 없다
        입력 값이 같다면, 출력 값은 항상 같다 (Deterministic function)결정적 함수
    (3) 전에 만든 유저를 지우고 다시 만드는데 이번엔 password를 해싱 해 준다
    (4) 해싱할 때 사용할건 bcrypt이다 (https://www.npmjs.com/package/bcrypt)
        npm i bcrypt 으로 설치
            해커가 rainbow table을 이용해서 해싱 된 비밀번호를 알아낼 수 있다
            bcrypt는 이 rainbow table 공격을 막아준다.
    (5) bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {
            // Store hash in your password DB.
        }); 를 사용
        await를 하는 것으로 callback을 하지 않는 방법도 있다. (saltRounds까지만 써주면 됨)
            saltRounds 는 해싱을 몇번 을 해줄 것인지를 말한다.
    (6) db에 저장하기전에 pre("save") middleware에서 password를 해싱한다
    (7) mongo에서 확인해보면 해싱된 password가 들어있는 것을 볼 수 있다
-----------------------------------------------------------------------------------
# 7.3 Form Validation
    (1) User를 새로 만들 때 이미 존재하는 데이터를 저장하면 에러가 발생한다
    (2) 에러를 체크해서 유저에게 알려줘야 한다
    (3) 컨트롤러에서 이미 db에 존재하는 유저네임,이메일인지를 확인하고, 존재한다면 에러 메세지를 보낸다.
    (4) 각각을 따로 체크해주는게 가장 좋은 방법일 순 있지만, 중복을 피하고 싶다면
        $or operator 라는걸 쓸 수 있다
            각 조건이 true일 때 실행되게 만들 수 있다
            안에 배열이 들어가고 그 중 어떤 조건이 하나라도 true이면 해당 데이터를 찾아온다
    (5) 패스워드를 확인할 수 있는 input을 하나 추가한다
-----------------------------------------------------------------------------------
# 7.4 Status Codes
    (1) 브라우저에서 로그인할 때 패스워드를 저장할거냐고 묻는다
    (2) 200 -> OK
        4xx -> client errors
            400 -> bad request
    (3) 브라우저에게 에러가 난거니까 저장할거냐고 묻지마~
        return res.status(400).render("join", {~~});
        status코드를 추가해 주면 된다
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------