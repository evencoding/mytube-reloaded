#7 USER AUTHENTICATION
-----------------------------------------------------------------------------------
# 7.0 Create Account part One
    (1) 지난 Section에서 연습한 것들을 모두 사용하고, 여기에 인증(Authentication)을 추가한다
    (2) 유저 CRUD를 만든다
        Schema에 unique를 추가했음
-----------------------------------------------------------------------------------
# 7.1 Create Account part Two
    (1) DeprecationWarning은 만든지 오래된 기능을 쓰고 있으니까 업데이트 하라고 알려주는 것
    (2) post로 받아보면 db상에 password가 그대로 노츨된다
        보안 상 아주 좋지 못함
    (3) password를 봐도 무슨 말인지 모르게 만들어야 한다.
        password hashing
            원래 password를 알지 못해도 password가 일치하는지 안하는지 알 수 있다.
-----------------------------------------------------------------------------------
# 7.2 Create Account part Three
    (1) DB에 password를 저장하면 안된다.
    (2) 해싱은 일방향이라 되돌릴 수 있다
        입력 값으로 출력 앖을 알아내는데, 출력 값으로 입력 값을 알아낼 수 없다
        입력 값이 같다면, 출력 값은 항상 같다 (Deterministic function)결정적 함수
    (3) 전에 만든 유저를 지우고 다시 만드는데 이번엔 password를 해싱 해 준다
    (4) 해싱할 때 사용할건 bcrypt이다 (https://www.npmjs.com/package/bcrypt)
        npm i bcrypt 으로 설치
            해커가 rainbow table을 이용해서 해싱 된 비밀번호를 알아낼 수 있다
            bcrypt는 이 rainbow table 공격을 막아준다.
    (5) bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {
            // Store hash in your password DB.
        }); 를 사용
        await를 하는 것으로 callback을 하지 않는 방법도 있다. (saltRounds까지만 써주면 됨)
            saltRounds 는 해싱을 몇번 을 해줄 것인지를 말한다.
    (6) db에 저장하기전에 pre("save") middleware에서 password를 해싱한다
    (7) mongo에서 확인해보면 해싱된 password가 들어있는 것을 볼 수 있다
-----------------------------------------------------------------------------------
# 7.3 Form Validation
    (1) User를 새로 만들 때 이미 존재하는 데이터를 저장하면 에러가 발생한다
    (2) 에러를 체크해서 유저에게 알려줘야 한다
    (3) 컨트롤러에서 이미 db에 존재하는 유저네임,이메일인지를 확인하고, 존재한다면 에러 메세지를 보낸다.
    (4) 각각을 따로 체크해주는게 가장 좋은 방법일 순 있지만, 중복을 피하고 싶다면
        $or operator 라는걸 쓸 수 있다
            각 조건이 true일 때 실행되게 만들 수 있다
            안에 배열이 들어가고 그 중 어떤 조건이 하나라도 true이면 해당 데이터를 찾아온다
    (5) 패스워드를 확인할 수 있는 input을 하나 추가한다
-----------------------------------------------------------------------------------
# 7.4 Status Codes
    (1) 브라우저에서 로그인할 때 패스워드를 저장할거냐고 묻는다
    (2) 200 -> OK
        4xx -> client errors
            400 -> bad request
    (3) 브라우저에게 에러가 난거니까 저장할거냐고 묻지마~
        return res.status(400).render("join", {~~});
        status코드를 추가해 주면 된다
-----------------------------------------------------------------------------------
# 7.5 Login part One
    (1) 로그인 페이지 만들기
    (2) /login으로 post 요청을 받았을 때 어떻게 하면 될까?
        우선 입력한 username을 가진 User가 존재하는지 확인해야한다
        그리고 password를 확인해야한다
    (3) postLogin 컨트롤러를 만든다
        mongoose를 사용해서 username과 일치하는 User가 있는지 확인
        존재하지 않다면 error메세지와 함께 login페이지로 보내준다, 이 때 status코드는 400
-----------------------------------------------------------------------------------
# 7.6 Login part Two
    (1) DB에는 해싱된 패스워드가 있다.
    (2) 유저가 입력한 비밀번호를 해싱한 후에 DB의 데이터와 비교한다
    (3) bcrypt 안에 compare함수를 이용한다
        const ok = await bcrypt.compare(password, user.password)  (사용자가 입력 한 pw, 해싱 된 DB안의 pw) 결과는 boolean
    (4) 로그인이 됐다면 redirect로 /으로 보내준다
    (5) 로그인했다는 말은 접속한 유저가 누구인지 기억하고 있다는 뜻
    (6) 이걸 위해서는 쿠키와 세션에 대해 알아야한다.
-----------------------------------------------------------------------------------
# 7.7 Sessions and Cookies part One
    (1) 유저를 기억하게 만들기
    (2) 쿠키를 이해하기 위해서는 세션을 알아야한다.
        세션은 백엔드와 브라우저 간에 어떤 활동을 했는지 기억하는걸 말한다
            브라우저와 백엔드 사이의 memory, history와 같은 것
    (3) 이것이 작동하려면 백엔드와 브라우저가 서로에 대한 정보를 가지고 있어야 한다.
        로그인 페이지에서 HTTP 요청을 하면 요청이 처리되고 끝나게 되는데, 그 이후로는 백엔드가 아무 것도 할 수 없다.
    (4) 한 번 연결이 되었다가 끝난다. 이 둘 사이 연결에 state가 없다.
        이것을 stateless라고 한다
    (5) 따라서 유저한테 어떤 정보를 남겨줘야 한다.
        유저가 백엔드에 뭔가 요청 할 때마다 누가 요청하는지 알 수 있도록.
    (6) 유저가 로그인 할 때마다 조그마한 텍스트와 같은 것을 줄 것이다.
    (7) 포인트는 유저가 로그인 할 때마다 유저에게 그 유저라는 것을 알 수 있는 무언가를 준다는 것이다
    (8) 유저가 요청할 때마다 유저를 특정할 수 있는 텍스트를 같이 받는다

    (9) npm i express-session 으로 설치한다
    (10) 서버에서 세션을 import한다
    (11) 그 후 이 미들웨어를 router 앞에 초기화해주면 된다
        이제 이 미들웨어가 사이트로 들어오는 모두를 기억하게 된다
-----------------------------------------------------------------------------------
# 7.8 Sessions and Cookies part Two
    (1) DB와 연결하지 않았기 때문에 서버를 재시작하면 세션도 잃는다
    (2) 

    () 내가 브라우저에서 웹사이트를 방문할 때마다 세션 미들웨어가 있으면
        express가 알아서 그 브라우저를 위한 세션 id를 만들고, 브라우저한테 보내준다.
        그러면 브라우저가 쿠키에 그 세션 id를 저장하고, express에서도 그 세션을 세션 DB에 저장한다.
            세션 DB에 있는 id와 쿠키에 있는 id가 같도록
        그러면 브라우저한테 보내서 쿠키에 저장한 세션 id를 브라우저가 localhost:~~의 모든 url에 요철을 보낼 때마다
        세션 id를 요철과 함께 보낼것이다
        그러면 백엔드에서 어떤 유저가, 어떤 브라우저에서 요철을 보냈는지 알 수 있다
-----------------------------------------------------------------------------------
# 7.9 Logged in User
    (1) 누가 로그인 했는지 기억하도록 만든다
        기억한다기 보다는 1초마다 까먹는 사람한테 질문 받을 때 마다 정보가 담긴 카드를 건네는 것과 같다
    (2) user controller에서 유저가 로그인하면 그 유저에 대한 정보를 세션에 담는다.
        각 브라우저마다 서로 다른 세션을 가지고 있다
    (3) 세션 정보에 맞게 템플릿을 수정한다
    (4) 현재 req.session object에 정보를 저장하고 있다.
        유저가 로그인에 성공했는지 안했는지 상관없이.
        어떤 정보든지 추가할 있는데, 여기서는 loggedIn과 user를 추가했다
    (5) pug가 req.session이 뭔지 모르는기에 알려줘야 한다
-----------------------------------------------------------------------------------
# 7.10 Logged In User part Two
    (1) Response Object를 console.log 해보면 locals 이라는 것이 존재한다.
        현재는 비어있는 Object이다
        pug template에서 locals에 접근할 수 있다.(기본적으로 되는것) 
            local.~도 아니고 그냥 ~ 즉, 변수만으로 접근 가능
    (2) 이런 방식으로 템플릿과 소통한다 
        이는 글로벌 변수이기에 모든 템플릿에서 사용가능하다.
    (3) middlewares.js라는 파일을 생성해서 몇 개의 locals을 설정해준다
    (4) 이제 locals을 통해 누가 로그인했는지 공유한다
    (5) locals middleware가 session middleware보다 뒤에 오기 때문에 가능
        localsMiddleware가 session object에 접근 하기 위해
    (6) user정보도 session에 들어있기 때문에 locals에 넘겨줘서 템플릿과 공유
-----------------------------------------------------------------------------------
# 7.11 Recap
    (1) 첫번째로, session middleware를 생성
        express-session이라는 module로부터 주어진 것
        브라우저가 나의 backend와 상호작용할 때 마다 session이라는 middleware가 브라우저에 cookie를 전송
    (2) cookie는 backend가 브라우저에 주는 정보인데, cookie에는 정해진 규칙이 있기 때문에,
         내가 매번 bakcend에 request를 할 때 브라우저는 알아서 그 request에 cookie를 덧붙이게 된다
         어떤 정보든 넣을 수 있다
         이번에 넣은 것은 session ID 이다
    (3) cookie와 session ID 는 다르다
        cookie는 단지 정보를 주고 받는 방법이고,
        session ID는 cookie에 저장된다
    (4) backend는 생성된 모든 session ID를 관리하는 곳이다
    (5) Session store는 내가 session을 저장하는 곳이다
        내가 매번 코드를 저장하면 서버가 재시작되는데 session store는 사라진다
        cookie store를 MongoDB와 연결해서 이부분을 고친다
    (6) locals는 내가 뭐든 할 수 있는 Object이다
        나의 template이 locals object에 접근할 수 있다
-----------------------------------------------------------------------------------
# 7.12 MongoStore
    (1) session id 는 쿠키에 저장하지만, 데이터 자체는 서버에 저장된다
    (2) 서버에 저장되는 default session storage는 MemoryStore이고, 실제 사용하기 위해 있는 것은 아니다
    (3) 이번 프로젝트에서는 connect-mongo를 사용할 것이다
        connect-mongo는 세션을 MongoDB에 저장한다
        따라서 서버가 재시작하더라도 session은 db안에 저장되있기 때문에 누군가 로그인 되어있어도 잊어버리지 않는다
    (4) npm install connect-mongo 로 설치
    (5) 그 후 서버에서 MongoStore를 import 한 후 사용한다.
    (6) 이제 MongoStore.create를 해야하는데, 나의 Mongo database의 URL을 가지고 있는 
        configuration object를 만들어야 한다
    (7) session middleware는 store라는 option 하나가 있다.
        다시말해, default로 설정된 것과는 다른 store를 설정할 수 있다
        내가 필요한 단 한가지 option은 내가 사용할 MongoDB로의 url이다
    (8) 이걸로 session들은 MongoDB database에 저장된다
        db에 sessions 이라는 collection이 생긴다
    (9) session을 만든다
        세션은 브라우저가 나의 backend를 방문할 때 만들어진다

    MongoStore.create가 없으면 세션이 서버의 메모리에 저장되기 때문에 서버를 재시작하면 모든 세션이 사라진다
    세션을 database에 저장하도록 만들었다
-----------------------------------------------------------------------------------
# 7.13 Uninitialized Sessions
    (1) resave와 saveUninitialized의 차이점과 이것을 false로 바꾸는 방법
        session authenrication(인증)을 사용하면서 생길 수 도 있는 문제에 대해서 배울 수 있다
    (2) 만약 봇이 나의 웹사이트를 방문하거나, 로그인하지 않고 구경만 하려는 사용자들이 방문했을 때
        지금은 모든 방문자에 대해 쿠키랑 session을 만들고, 이 session을 DB에 모두 저장하는데, 좋은 생각이라고 할 수 없다
        로그인한 사용자의 session만 저장하는게 좋을수도 있다
    (3) 모든 방문자에 대해서 쿠키를 주지 않을거다
        로그인한 사용자에게만 쿠키를 줄것이다
        resave와 saveUninitialized 를 false로 설정한다
            브라우저에서 쿠키를 지운다
    (4) db에서 모든 세션을 지운다
    (5) saveUninitialized
            세션이 새로 만들어지고 수정된 적이 없을 때 uninitialized 이다
            세션은 한 곳에서만 수정될 수 있는데, req.session이 그렇다
        로그인 시에 req.session을 수정하고 있기 때문에 backend가 로그인한 사용자에게만 쿠키를 주도록 설정됐다
        backend가 DB에 저장하는게 session 인증에서의 문제점 중 하나인데, 이걸 위한 해결책으로 token authentication이 있다
        예를 들어 iOS나 안드로이드 앱을 만들 때 이것들은 쿠키를 갖지 않기 때문에 token을 사용한다
    (6) secret 과 url 부분은 코드에서 보이면 안된다.
        왜냐면 이 웹사이트를 서버에 배포 할 때, 이 DB URL을 그냥 두면 안된다
            누군가가 DB URL을 알고 연결할 수 있기 때문에 위험
-----------------------------------------------------------------------------------
# 7.14 Expiration and Secrets
    (1) 쿠키의 프로퍼티에 대하여
    (2) Name, Value, Domain, Path, Expires / Max-Age, Size, HttpOnly, Secure, SameSite, Priority 등
    (3) secret
        secret 은 내가 쿠키에 sign 할 때 사용하는 string이다
        쿠키에 sign하는 이유는 내 backend가 쿠키를 줬다는걸 보여주기 위함이다
        session hijack(납치)라는 공격유형이 있기 때문에
            누군가 나의 쿠키를 훔쳐서 마치 나인 척 할 수 있기 때문에 이걸 잘 보호해야 한다
        secret의 string을 가지고 쿠키를 sign하고 내가 만든 것임을 증명할 수 있다
    (4) Domain
        Domain 은 이 쿠키를 만든 backend가 누구인지 알려준다
        브라우저는 Domain에 따라 쿠키를 저장하도록 되어있고, Domain에 있는 backend로만 전송된다
        즉, 쿠키가 어디에서 왔는지, 어디로 가야하는지 알려주는 것이다
    (5) Expires
        Expires를 보면 Session이라고 적혀있다면 그 쿠키는 만료 날짜가 명시되지 않은것이다
        만약 내가 만료날짜를 지정하지 않으면 session cookie로 설정되고,
        사용자가 닫으면 session cookie는 끝나게 된다.
    (6) Max-Age
        Max-Age는 말그대로 언제 세션이 만료되는지 알려준다
        cookie: {maxAge: } 로 값을 바꿀 수 있다. 값은 1/1000초 단위
    (7) session 안의 DB URL을 보호해야 한다
        이걸 위해 environment file(환경변수)을 만든다
        .env 파일을 만들고 gitignore에 넣어준다
        .env에는 코드에 들어가면 안되는 값들을 추가한다 (API key나 비밀로 해야하는 url 등)
            관습적으로 env 파일에 추가하는 모든 건 대문자로 적어야 함
        process.env. 로 접근한다
-----------------------------------------------------------------------------------
# 7.15 Expiration and Secrets
    (1) 어떻게 DB URL을 env에서 읽을 수 있는지
    (2) 이번 프로젝트에서 사용할 것은 dotenv라고 불리는 것이다
        이 Pacakge 가 하는 일은 나의 env 파일을 읽고 각각의 변수들을 process.env 안에 넣는다
    (3) npm i dotenv 로 설치한다
    (4) require('dotenv').config() 로 사용한다

    dotenv는 파일을 읽고 env에 추가를 해준다
    require('dotenv')를 가장 먼저 실행하지 않으면 다른 파일에서 사용할 수 없기 때문에,
    가장 먼저 실행하는 파일의 가장 위에 넣어준다
        이번 init.js에서부터 시작하기 때문에 init.js 의 가장 위에 넣어준다
    require로 사용하려면 필요한 모든 파일에 require을 추가해 줘야한다
    하지만 번거롭기 때문에 require로 import 하는 부분을 import 방식으로 바꾼다
        import "dotenv/config";
    .env 파일은 src 폴더 밖에

    이걸로 중요한 정보를 숨길 수 있다
-----------------------------------------------------------------------------------
# 7.16 Github Login part One
    (1) 웹 사이트에 소셜 로그인을 구현하는 방법
    (2) 이번 프로젝트에서는 깃헙 로그인을 적용시킨다
    (3) 흐름
        1. 사용자를 깃헙으로 보낸다
            사용자는 깃헙으로 이메일이랑 패스워드 등등을 넣게 된다
            그리고 나아게 정보를 공유하는 것을 승인하게 된다
        2. 그러면 깃헙은 사용자를 우리 웹사이트로 돌려보낸다
        3. 깃헙은 사용자를 token과 함께 redirect 시킨다
            그러면 내가 그 token으로 사용자의 정보를 받아들인다
    (4) Github Application이 있어야 한다
        1. Github 사이트에서 Developer settings 로 들어감
        2. OAuth Apps로 들어간다
        3. New OAuth App을 클릭
            Authorization callback URL 에는 아무거나 넣어줘도 되는데, 코드에서 나중에 사용해야 하기 때문에 기억할 수 있어야한다
    (5) 순서
        1. 사용자들은 깃헙 신원을 요철하기 위해 redirect 된다
            login.pug 에서 a태그로 (https://github.com/login/oauth/authorize)를 추가
            Parameters 를 보내줘야 한다
            그 중 하나는 Client ID
            URL에 Client ID를 보낸다
                https://github.com/login/oauth/authorize?client_id=~~
        2. 이걸 클릭해서 Authorize한다
            클릭하면 내 사이트로 redirect하게 되는데, 나는 public 데이터보다 더 많은 정보를 받고 싶다
            따라서 scope에 뭔가를 전송한다
            scope에는 내가 사용자에 대해 어디까지 알 수 있는지를 적는다
            allow_signup 은 사용자가 깃헙 계정이 없다면 계정을 생성할 수 있게 할지, 이미 계정이 있는 사람만 하게 할지를 결정
                allow_signup=false를 주면 계정 생성이 불가능하다
-----------------------------------------------------------------------------------
# 7.17 Github Login part Two
https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps
    (1) scope
        scope는 유저에게서 얼마나 많이 정보를 읽어내고 어떤 정보를 가져올 것에 대한 것이다
        따라서 필요한 정보만 요청하도록 해야한다
            url에 scope=user:email 을 추가하면 사용자의 email에 접근이 가능하다
            url에 scope=user 를 추가하면 읽고 쓰는 등 모든 접근이 가능하다
        내가 어떤 정보를 요청하느냐에 따라 user는 승인을 받게 되고, Github는 나에게 정보에 접근할 수 있도록 토큰을 준다
        필요한 정보들은 url에 스페이스로 나눠서 요청할 수 있다
    (2) 한가지 문제점은 긴 URL을 계속해서 변경해줘야 한단 것이다
        Github로 계속되는 똑같은 URL을 원한다고 했을 때, Join에 넣는다고 치면 url이 들어있는 a태그를 전부 복붙해야한다
        scope를 하나 바꾼다 해도 또 바꿔줘야 하고, 클라이언트 ID가 바뀌면 다른 template에도 바꿔줘야한다
        따라서 한 군데에 전부 모아두는게 낫다
    (3) a태그를 클릭하면 /users/github/start 로 보내주고, 라우터와 컨트롤러를 만든다
    (4) 컨트롤러에서 baseUrl과 config 오브젝트로 url을 조각낸 후 인코딩해서 URL 상에서도 동작할 수 있게 한다
        UrlSearchParams라고 하는 utility를 사용한다
            new URLSearchParams(config).toString() 으로 URL이 인코딩 되어 나오는 것을 볼 수 있다
        이렇게 나온 것들을 전부 URL에 집어 넣는다
            const finalUrl = `${baseUrl}?${params}`;
    (5) 한 가지 더 해야 할 건 Authorize를 클릭할 수 있게 만드는 것이다
        Authorize를 클릭하면 Authorization callback URL 로 redirect 시켜준다
        나에게 없는 Authorization callback URL 과 controller를 만들어 준다
    (6) 유저가 Authorize를 클릭한 순간부터는 이미 Github에 "예"라고 한 걸 알기 때문에 또 대답할 필요가 없다
        따라서 바로 Authorization callback URL로 redirect 된다
    (7) 이제 user를 code와 함께 돌려 보낸다
-----------------------------------------------------------------------------------
# 7.18 Github Login part Three
    (1) Github에서 받은 토큰을 Access 토큰으로 바꿔줘야 한다
        POST https://github.com/login/oauth/access_token
        client_id,client_secret,code 등과 같은 parameter 들과 함께 POST 요청을 보내야 한다
        client_id를 .env파일에 둠
            비밀이기 때문이 아닌 값을 한 장소에 넣음으로서 어디서든지 값을 사용할 수 있게 하기 위함
    (2) client_secret이 필요하다
        오로지 백엔드에만 존재해야하는 secret
        따라사 .env파일에 추가한다
    (3) finishGithubLogin 컨트롤러에서 config 변수에 client_id, client_secret, code 를 넣는다
    (4) 이것들을 URL 로 다시 집어넣어야 한다
    (5) fetch 를 이용해서 데이터를 받아온다
        fetch 는 브라우저에서는 사용할 수 있지만 NodeJS 에는 포함되어 있지 않다
-----------------------------------------------------------------------------------
# 7.19 Github Login part Four
    (1) npm i node-fetch 로 설치해서 NodeJS에서도 fetch를 사용할 수 있게 한다
    (2) access_token을 갖고 API에 접근한다
        이제 access_token을 가지고 user의 정보를 얻을 수 있다
    여기까지 과정
        1. Github에 user를 보내고, user가 Github에서 "예"라고 하면 Github는 코드를 줄 것이다.
        2. 그 코드를 가지고 access_token으로 바꾼다
        3. 그럼 access_token으로 Github API를 사용해 user 정보를 가져온다
    (3) JSON에 있는 access_token을 가져온다
    (4) 인증을 위한 access_token을 보내줘야한다
    (5) fetch로 Github API를 이용해서 user의 정보를 받아왔는데 email값이 null이다
        privite이기 때문에
        따라서 email이 null값일 때를 대비해서 또 다른 request를 만들어야 한다
-----------------------------------------------------------------------------------
# 7.20 Github Login part Five
    (1) 전 강의에서 Github이 준 코드를 가지고 access_token으로 교환했다.
        access_token은 Github API URL을 fetch하는데 사용되었다.
        그렇게해서 얻은 건 user의 public 정보다.
            scope로 요청했기 떄문에 가능했던 것
    (2) user의 email을 가져온다
        public email이 아니기 때문에 user의 email을 요철하기 위해 똑같은 access_token을 써야한다
    (3) 이제 email이 verified이면서 primary인 것들을 찾는다 (find함수를 이용)
        없으면 login페이지로 redirect시킨다 (나중에는 에러 norification을 보여주면서 redirect 시킬것)
-----------------------------------------------------------------------------------
# 7.21 Github Login part Six
    (1) 로그인 규칙을 어떻게 만들 것인가
-----------------------------------------------------------------------------------
# 7.22 Log Out
    (1) 이전 강의에서는 Github 프로필의 email이 데이터베이스에 있을 떄 유저가 로그인 할 수 있게 했다.
    (2) 다음 섹션에서 유저 아바타를 다룰것이기 때문에 user schema에 avatarUrl을 추가한다
    (3) 로그아웃을 로그아웃 컨트롤러에서 세션을 파괴한다
        req.session.destroy();
-----------------------------------------------------------------------------------
# 7.23 Recap
    (1) Github로 로그인 하기
        1. /user/github/start로 가는 링크를 만들었다
            route를 생성하기 위함
        2. startGithubLogin 컨트롤러를 만들었다
            몇몇 configuration parameter를 가지고 URL을 만들기 위함
            유저를 URL로 즉 Github로 보내준다
            URL을 설정하는 이유는 URL이 Github에게 뭔가를 알려줄 수 있어서이다
                ex) client_id (Github이 어떤 어플에 로그인하는지 안다)
                    allow_signup (어플에 어떤 종류의 user를 허용 시킬건지 설정할 수 있다)
                    scope (user로 뭘 할건지 설명한다) 원하는 어떤 scope도 사용할 수 있지만, 해당 scope로 요창해야한다
        3. 유저가 이러한 데이터들을 공유하는데 동의를 하면 나의 웹사이트로 되돌아온다
            /github/finish 라는 URL로 돌려보내게 했다 (Authorization callback URL) -> finishGithubLogin 이라는 function을 호출
        4. finishGithubLogin 컨트롤러를 만들었다
            먼저, user가 Github에서 돌아오면 /github/finish?code=xxxx가 덧붙여진 내용을 받는다
                code는 user가 승인했다고 Github가 알려주는 것이다
            baseUrl과 몇몇 parameter들을 받고, parameter들을 URL의 parameter string으로 바꿔준다
            finalUrl을 만들어서 URL로 POST request를 보낸다 (URL에는 Github가 준 code가 담겨져 있다)
            모든 것이 올바르다면, Github는 나에게 access_token을 준다
                access_token은 Github API와 상호작용 할 때 사용한다
            user 프로필을 받기 위해 요청한다
                fetch로 URL에 access_token을 보내면 user데이터를 받을 수 있다 
                    awati (await fetch()).json();
                가끔은 user들이 email을 보여주지 않을 때도 있다
                    따라서 email API에게도 요처을 보내줘야한다
                    위와 같은 방식으로 요청 하면 email array를 받을 수 있다
                    그 eamil array 중에서 primary이면서 verified 된 email을 찾는다
                        찾지 못하면 user를 로그인 페이지로 돌아가게 했다 (나중에는 notification을 설정해 줄것 {유저에게 Github로 로그인 했다는 걸 알려주기 위해})
                        찾는다면 DB 에서 해당 email을 찾는다
                            DB에서 해상 email을 찾는다면 유저를 로그인 시킨다
                            찾지 못하면 그 email로 user를 만든다
        5. 이것들이 전부 실행되면 쿠키가 생긴다
        6. 로그아웃 기능은 간단하다
            컨트롤러에서 세션을 파괴해주면 된다

        카카오, 트위터 등 이와 비슷한 과정으로 가능하다
-----------------------------------------------------------------------------------