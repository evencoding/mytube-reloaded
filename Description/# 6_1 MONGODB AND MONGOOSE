-----------------------------------------------------------------------------------
# 6.0 Array Database part One
    (1) back end 에 데이터를 저장하는게 요점이기 때문에 어떻게 back end 에 데이터 보내야하는가를 먼저 알아야 한다
    (2) 현재 Router에서 내가 하고있는 건 get 뿐이다
        post하는 방법을 알아야 한다
    (3) pug에서 태그의 attribute에서 #{}는 사용할 수 없다
        변수를 사용할 때는 JS의 백틱 format을 사용한다 or "~~" + 변수
-----------------------------------------------------------------------------------
# 6.1 Array Database part Two
    (1) ternary operator #{~~ === ~ ? "~~"}
    (2) a태그의 href의 앞머리 부분에 "/~~"를 넣으면 내가 어디에 있든 상관없이 root + ~~로 이동한다
        absolute url
    (3) a태그의 href의 앞머리 부분의 /를 지우고 "~~"를 적으면 내가 있던 곳/~~로 이동한다
        relative url
-----------------------------------------------------------------------------------
# 6.2 Edit Video part One
    (1) form태그에 action 속성에 데이터를 어디로 보낼지가 들어간다
        action이 없으면 같은 url로 데이터를 보냄
    (2) method를 안적어주면 디폴드 값인 GET method가 사용된다
    (3) GET과 POST의 차이를 알기위해 input에 name 속성을 준다
    (4) GET Method를 사용하면, form에 있는 정보가 url에 들어가게 된다
    (5) POST 방식은 파일을 보내거나, database에 있는 값을 바꾸는 뭔가를 보낼 때 사용한다
    (6) 서버에게 post가 뭔지 알려줘야한다
        Router에서 videoRouter.post("url", function);
-----------------------------------------------------------------------------------
# 6.3 Edit video part Two
    (1) get, post가 같은 url일 때는 route를 만들어서 한번에 쓸 수 있다
        videoRouter.route("/:id(\\d+)/edit").get(getEdit).post(postEdit);
    (2) res.redirect()는, 브라우저가 redirect(자동으로 이동)하도록 하는 것이다
    (3) 이 단계에서 express application은 form을 어떻게 다루는지 모른다
    (4) express.urlencoded  form의 body를 이해한다
        1. parameterLimit를 써서, 필요하다면 parameter 갯수에 제한을 줄 수도 있다.
        2. limit를 써서 form의 사이즈에 제한을 줄 수 있다.
        3. extended는 body에 있는 정보들을 보기 좋게 형식을 갖춰주는 일을 한다.
            자바스크립트 object 형색으로 form의 데이터를 준다
        routes를 사용하기 전에 이 middleware를 사용해야 한다
    (5) app.use(express.urlencoded({ extended: true }));
        나의 express application이 form의 value들을 이해할 수 있도록 하고, 
        내가 쓸 수 있는 자바스크립트 형식으로 변형시켜준다
            데이터를 받기위해 input에 name을 줘야함
-----------------------------------------------------------------------------------
# 6.4 Recap
    (1) form을 이용해서 POST로 back end로 데이터를 보냄
    (2) req.body는 form에 있는 value의 JS representation이다
    (3) req.body로 접근할 수 있지만 한가지 middleware를 설정해야한 가능하다
    (4) app.use(express.urlencoded({ extended: true }));
        HTML form을 이해하고 그 form을 사용할 수 있는 JS Object 형식으로 통역해준다
    (5) 이 middleware가 라우터들 전에 오기 때문에!, post를 받기전에 request에 body가 있는 것이다
    (6) mongoose를 통해서, 자바스크립트에서 mongodb와 상호작용 한다
-----------------------------------------------------------------------------------
# 6.5 More Practice part One
    (1) 6.2, 6.3 내용 연습
        Controller
            1. 유저가 form을 볼 수 있어야 하기 때문에 get을 만든다
            2. post로 데이터를 받았을 때 처리할 post를 만든다
        Router
            라우트를 만들어 준다
        url로 가는 링크를 만든다
            view파일
-----------------------------------------------------------------------------------
# 6.6 More Practice part Two
    (1) 6.2, 6.3 내용 연습
    (2) GET url과 POST로 데이터를 보낼 url이 같으면 action 속성을 생략해도 된다
    (3) input으로부터 data를 얻는 방법 (name속성이 존재해야함)
            res.body
                app.use(express.urlencoded({ extended: true })); 가 라우터들 위에 있어야함
-----------------------------------------------------------------------------------
# 6.7 Introduction to MongoDB
    (1) document-based(문서 기반) DB
            database도 object로 생각함
            즉, mongoDB에서 저장하는 것들은 JSON-like-document다
            또, mongoDB는 document 내부를 검색할 수 있도록 해준다
        보통의 DB들은 sql base(행,열 기반)이다
    (2) mongoDB 설치
            Docs -> Server -> installation
            Window10에선 Chocolatey
                Windows 유저들을 위한 package 매니저이다
-----------------------------------------------------------------------------------
# 6.8 Connecting to Mongo
    (1) mongoose
        1. mongoose는 node.js와 mongoDB를 이어주는 다리가 되어준다
        2. 자바스크립트로 적으면, mongoose가 mongoDB에게 전해준다
    (2) cmd에서 mongod 로 재대로 설치되었는지 확인하고, mongo 커맨드로 mongoDB와 cmd와 연결 해준다
        exit로 나갈 수 있다
    (3) npm i mongoose로 mongoose를 설치한다
    (4) src 폴더 안에 db.js 파일을 생성한다
    (5) database가 실행되고 있는 url을 알아야한다
        mongo 명령어를 console에서 실행시켜서, url을 받아야함
    (6) mongoose를 import 하고 mongoose.connect("url/databaseName") 로 url/databaseName을 넣어준다
        mongoose.connect("mongodb://127.0.0.1:27017/mytube", {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
    (7) 서버 파일에서 db파일 자체를 import한다
        import "./db";
    (8) shell에서 show dbs를 해주면, 아직 내가 연결한 db의 이름이 나오지 않는다
    (9) const db = mongoose.connection;
        db.on() 은 여러번 계속 밸생시킬 수 있다 (클릭과 같은 이벤트 처럼)
        db.once() 는 오로지 한번만 발생한다는 뜻이다
-----------------------------------------------------------------------------------
# 6.9 CRUD introduction
    (1) src폴더안에 models이란 폴더를 생성한다
        models 폴더안에 Video.js 파일을 만들어서 비디오 model을 만든다
    (2) model (파일과 모델명의 앞글자는 대문자로 작성한다)
        1. mongoose에게, 나의 어플리케이션의 데이터들이 어떻게 생겼는지 알려줘야한다
            ex) 비디오에 제목이 있고, 세부설명이 있고, 이들의 타입은 무엇인지 등등
        2. 이렇게 알려주면, mongoose는 데이터를 CRUD 할수있게 도와준다
-----------------------------------------------------------------------------------
# 6.10 Video +Model
    (1) mongoose를 import 해준다
    (2) model을 생성하기 전에, model의 형태를 정의해 줄 필요가 있다
        그 형태는 보통 schema라고 알려져 있다
            const videoSchema = new mongoose.Schema({}) 안에 데이터의 형태를 정의한다
    (3) model 을 만들어 준다
        const movieModel = mongoose.model("모델이름", SchemaName);
    (4) model 을 export 해준다
    (5) model 의 존재를 모두에게 알려준다
        서버 파일에서 import해준다
    Recap
        1. video의 형태(schema) 정의
        2. model 이름과 schema를 이용해서 model 생성
        3. model 을 default로 export 해준다
        4. server.js에 database를 import 해 연결시킨 후, 
            해당 연결이 성공적일 때, video를 import 해준다
            위 연결로 db는 video model을 인지한다
-----------------------------------------------------------------------------------
# 6.11 First Query
    (1) src 폴더에 init.js 파일을 생성한다
        이 파일에서는 모든걸 초기화시켜준다
            server.js는 express 된 것들, server의 configuration에 관련된 코드만 처리하기 위해
            나머지(database나 models 같은 것들의 import 등)는 init파일에서 관리해준다
                필요한 모든 것들을 import 시키는 역할
    (2) package.json 의 scripts수정
    (3) 이제 database 와 연결해야 하는데, mongoose documentation 참조
    (4) mongoose의 model 들은 CRUD operation을 돕는 많은 function 들을 제공한다
    (5) model.find() 의 결우 database가 종료되거나, 바쁘거나, 전송속도가 느리거나 등의 상황이 발생할 수 있다
        database는 javascript 밖에 존재하기 때문
        기다림이 필요할 때가 있다
    (6) 기다림에는 두가지를 활용할 수 있다
        1. callback function 을 활용
        2. promise 를 사용
    (7) callback 이란 무언가가 발생하고 난 다음 호출되는 function을 말한다
        configuration 과 호출할 function이 필요함 ex) app.listen(PORT, handleListening)
            Video.find({}, (error, documents) => {})
                중괄호는 search terms 를 나타내는데 비어있으면 모든 형식을 찾는다는 것을 뜻한다
                callback 은 error와 documents 라는 signature 를 가진다
-----------------------------------------------------------------------------------
# 6.12 First Query part Two
    (1) mongoose 는 Video.find({}, 를 database에서 불러온다
        database가 반응하면 mongoose는 (error, documents) => {}) 이 function을 실행한다
    (2) callback 을 사용하면 아무것도 return 되지 않아야 한다
        특정 코드를 마지막에 실행되게 한다
    (3) logger는 request가 완성되면(render되면) 출력이 되야한다
-----------------------------------------------------------------------------------
# 6.13 Async Await
    (1) promise 는 callback의 최신 버전이라 생각할 수 있다
    (2) error는 try catch 문으로 잡아낸다
    (3) async와 await의 최대 장점은 직관적이라는 것이다
    (4) await는 asynchronous인 function 안에서만 사용이 가능하다
-----------------------------------------------------------------------------------
# 6.14 Returns and Renders
    (1) callback함수 안에서 return은 필수가 아님
        하지만 실수를 방지하기 위해 function을 마무리 한다는 의미로 return을 사용
    (2) render는 한번만 사용가능
-----------------------------------------------------------------------------------
# 6.15 Creating a Video part One
    (1) Video를 만들기 위해 document(데이터를 가진 비디오)를 만들어줘야한다
    const video = new Video({
        title,
        description,
        createdAt: Date.now(),
        hashtags: hashtags.split(",").map((word) => `#${word}`),
        meta: {
            views: 0,
            rating: 0,
        },
    });        
        mongoose 가 고유의 id를 자동으로 부여해준다
    (2) document를 database에 저장한다
-----------------------------------------------------------------------------------
# 6.16 Creating a Video part Two
    (1) 가능하다면 모델에 지정해 준 데이터 타입으로 자동으로 변환된다(mongoose에 의해)
        그렇지 못할 때에는 document에 데이터 자체가 포함되지 않는다
    (2) database에 데이터 저장
        1. video.save();
            save는 promise를 return 해준다 즉, save 작업이 끝날 때까지 기다려줘야 한다
        2. 이 과정으로 mongo 에서 show dbs를 입력해주면 mytube가 추가된걸 볼 수 있다
    (3) mongo 에서 use mytube -> show collections -> document의 group을 볼 수 있다
    (4) database에 저장하는 방법
            1. JS 오브젝트를 만들고, 오브젝트를 database에 저장하는 방법
            2. await Video.create() 을 이용하는 방법
                JS object를 만들어주는 과정을 안해도 된다
-----------------------------------------------------------------------------------
# 6.17 Exceptions and Validation
    (1) 에러를 잡아내기 위해 try, catch문을 사용한다
        에러가 발생하면 catch문에서 upload 페이지를 다시 render해주고 에러 메세지를 보내준다
        upload 템플릿에서 error 메세지가 존재하면 화면에 띄워준다
    (2) 모델에 추가할 document에 매번 데이터 타입을 지정해주는게 귀찮기 때문에
        모델에서 default 값을 설정해준다
            createdAt: { type: Date, required: true, default: Date.now },
                Date.now() 는 함수를 바로 실행시키기 때문에 불러왔을 때 실행하도록 ()는 뺀다
-----------------------------------------------------------------------------------
# 6.18 More Schema
    (1) schema에 string이 있으면 추가할 수 있는 것들
        1. lowercase, uppercase: boolean
        2. trim: boolean 
            string 양쪽의 빈 공간들을 없애준다
        3. math
        4. enum (Array)
        5. minLength, maxLength: Number
        6. populate (Object)
    (2) 데이터에 대한 구체적인 설정은 정말 정말 중요하다
    (3) 사용자를 위해 input에서도 알려줘야하고, 보안을 위해 database에도 제한을 알려줘야한다
-----------------------------------------------------------------------------------
# 6.19 Video Detail
    (1) documentation에서 mongoDB id에 대해 조사해서 regular expression을 만든다
        24자 string의 16진수로 이루어지기 때문에 id를 정규식으로 나타내면 [0-9a-f]{24}가 된다
    (2) watch.pug 파일 수정
    (3) findById(), findOne()
        1. findOne 은 내가 보내는 모든 condition을 적용시킨다
        2. findById 는 id로 찾아낼 수 있는 기능을 지원한다
    (4) findById() 를 이용해서 DB안에 해당 id와 일치하는 데이터를 가져온다
    (5) watch template에 video를 전송해준다
-----------------------------------------------------------------------------------
# 6.20 Edit Video part One
    (1) .exec()
        query를 실행(execute)시키는 것이다
            내가 만약 execute를 호출하면 mongoose내부에서 promise 가 return 된다
            await를 사용하고 있기 때문에 현재는 불필요하다
    (2) 누군가 존재하지 않는 비디오 페이지로 접근 했을 때의 처리를 해준다
        if문으로 미리 확인하고 존재하지 않는다면 404를 render해준다
    (3) 404템플릿을 생성한다
    (4) 업데이트를 위해 getEdit 로직을 처리해준다
        보통 에러를 먼저 처리한다 (if문안에 에러 처리를 해주고 if문 밖에 정상적인 경우 실행될 것들로 코딩)
    (5) edit 템플릿에 input을 추가해주고 value를 채워준다
    (6) hashtags는 DB안에 Array형식으로 되어있기 때문에 value의 모양이 이상하다 format해준다
        Array.join() 으로 Array를 String형식으로 바꿀 수 있다
-----------------------------------------------------------------------------------
# 6.21 Edit Video part Two
    (1) 업데이트 한 내용을 post request를 보낸다
    (2) 귀찮은 방법이지만 ID로 DB데이터를 불러와서 하나씩 대입해준 후 await video.save()로 DB에 저장한다
    (3) hashtags에 "#"가 안붙을 때만 "#"를 붙여주도록 function을 수정한다
        hashtags.split(",").map((word) => word.startsWith('#') ? word :`#${word}`);
    (4) 이제 로직을 수정해서 create와 save를 하나의 function에서 할것이다
        지금까지는 new Video() 방식으로 생성했다
-----------------------------------------------------------------------------------
# 6.22 Edit Video part Three
    (1) Model.findOneAndUpdate() function
        Model.findByIdAndUpdate() 두 개의 argument가 필요하다
            1. ID
            2. 업데이트 할 정보 혹은 내용
                귀찮게 수정하지 않고 함수 하나로 바꿀 수 있다
    (2) Model.exist()로 비디오를 따로 찾지않고 존재하는지 확인할 수 있다
        즉, video object를 받는 대신에 true 혹은 false를 받는다
        exist()는 id가 아닌 filter를 받는다
            await Video.exists({ _id: id })
    (3) Mongoose에도 express처럼 middleware가 있다 (pre, post, hook 도 있다)
-----------------------------------------------------------------------------------
# 6.23 Middlewares
    (1) useFindAndModify: false 를 db.js 파일에 connect함수에 추가한다
    (2) express에서의 middleware는 request를 중간에서 가로채서 뭔가를 하고 이어서 진행하는 것이다
    (3) Mongoose에서의 middleware도 같다
        document에 무슨 일이 생기기 전이나 후에 middleware를 적용할 수 있다
    (4) 생김새
        모델 파일에서 작성
        schema.pre('save', async function () {

        })
        function안에 this라는 키워드가 있다
            이 this는 내가 저장하고자 하는 문서를 가리킨다
    (5) middleware는 무조건 model 이 생성되기 전에 만들어야 한다
    (6) middleware안에서 document를 수정할 수 있다
        save 되기 전에 실행되기 때문
    (7) 이를 이용해서 hashtag 로직을 미들웨어에서 처리해준다
-----------------------------------------------------------------------------------
# 6.24 Statics
    (1) 미들웨어로 어떤 이벤트가 발생하기 전에 중간에 가로채서 문서를 수정 할 수 있었다
    (2) findByIdAndUpdate를 위한 pre middleware는 없다
    (3) 하지만 findOneAndUpdate를 위한 pre middleware는 존재한다
        다만 findOneAndUpdate는 save hook을 호출하진 않는다
    (4) 모델에서 해시태그를 처리하는 함수를 만들어주고 export한 후에 컨트롤러에서 import해서 사용해도 동일한 효과를 볼 수 있다
    (5) Static
        videoSchema.static("formatHashtags", function (hashtags) {
            return hashtags
                .split(",")
                .map((word) => (word.startsWith("#") ? word : `#${word}`));
        });
            이러한 형태로 Static으로 지정해두면 편하게 사용할 수 있다
        ex) hashtags: Video.formatHashtags(hashtags)
-----------------------------------------------------------------------------------
# 6.25 Delete Video
    (1) video 를 삭제한다
        1. watch 페이지로 가서 Delete Video를 a태그로 작성
            이번에는 아무것도 post하지 않는다. 단순히 이 URL을 방문할 뿐이다
            URL에 방문하면 video를 삭제한다
        2. 이 delete function의 라우터와 컨트롤러를 만든다
        3. Model.findByIdAndDelete() 를 사용해서 video를 db에서 삭제한다
    (2) delete와 remove의 차이점
-----------------------------------------------------------------------------------
# 6.26 Search part One
    (1) Mongoose는 굉장히 훌륭한 쿼리엔진을 가지고 있다.
        문서들을 보여주는 방식을 수정할 수 있고, 어떻게 검색할지도 수정할 수 있고, 어떻게 정렬할지도 고를 수 있다
        ex) const videos = await Video.find({}).sort({ createdAt: "desc" });
    (2) search 페이지를 만든다면 어느 router에 해야할까
        globalRouter
    (3) search 페이지에 form을 만드는데 여기서는 GET method를 사용한다 
        input에 name주는거 잊지말기
    (4) GET으로 보낸 URL에 있는 정보를 어떻게 가져올 것인가
        req.query 로 가져올 수 있다
            req.query는 URL 데이터를 위한 것
    (5) :~~ 는 req.params로
        POST로 보낸 form 정보는 req.body로
        GET으로 보낸 URL 정보는 req.query로 받을 수 있다
    (6) 사용자가 검색을 해야만 keyword 값이 생긴다
        if 문으로 keyword 가 true일 때 search에 대한 처리를 해준다
-----------------------------------------------------------------------------------
# 6.27 Search part Two
    (1) search 로 비디오를 찾는다
    (2) Mongoose, MongoDB와 소통하기 위해 사용해야 할 건 async와 await이다
    (3) Model.find({}) 에 filter expression을 보낸다
    (4) 비디오가 존재할 때 search 페이지에 videos 를 보내고 search 페이지에 이미 만들어둔 mixin을 include 해 페이지에 나타낸다
    (5) 이제는 검색 방식을 좀 더 개선할 필요가 있다
        제목을 토씨 하나 안 틀리고 입력하는건 비효율적이기 때문에 
            regular expression을 사용
                ^ㅇ -> ㅇ로 시작
                ㅇ$ -> ㅇ로 끝
            내 query에 이러한 것을 추가할 수 있다
    (6) 이것을 위해서는 regex라는 연산자를 사용해야 한다. (regular expression의 약자)
    videos = await Video.find({
      $regex: new RegExp(keyword, "i") # i 는 대소문자를 구분하지 않게 하는것 
    });
        keyword 로 keyword 가 포함된 것 찾기
        `^${keywword}` 로 keyword로 시작하는 것 찾기
        `${keyword}$`로 keyword 로 끝나는 것 찾기
    (7) 이렇게 regular expression안에 keyword를 집어 넣으면
        contain 방식의 regular expression을 생성하게 된다
-----------------------------------------------------------------------------------
# 6.28 Conclusions
-----------------------------------------------------------------------------------