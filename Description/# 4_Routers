-----------------------------------------------------------------------------------
# 4.0 What are Routers?
    (1) 라우터는 컨트롤러와 URL의 관리를 쉽게 해준다
        도메인 별로 나누는것이 가장 좋다
    (2) 라우터를 만들기 전에 README.md 에 플랜을 적어둔다
    (3) 프로젝트에 대해 생각해볼때 가장 먼저 생각해야하는 건 데이터다
    (4) 라우터는 작업중인 주제를 기반으로 URL을 그룹화 해준다
-----------------------------------------------------------------------------------
# 4.1 Making Routers
    (1) 홈에서 바로 갈 수 있는 페이지들을 담고있는 라우터를 통상 Global Router라고 한다
    (2) Router를 만들때에는 URL에 따라 나누는 규칙이 있지만 마케팅이나 편의성을 위해서 예외도 존재한다 ex) /join, /login 등
    (3) express.Router();로 라우터를 만들 수 있다
        ex) const globalRouter = express.Router();
    (4) app.use("/", globalRouter); 식으로 라우터를 사용할 수 있다
    (5) 라우터들에 함수를 넣어야 한다
        globalRouter.get("/", 함수)
-----------------------------------------------------------------------------------
# 4.2 Cleaning the Code
    (1) 모든 파일은 모듈이고, 거품과도 같다
    (2) 폴더를 만들어서 라우터들을 따로 컴포넌트화 한다
    (3) 서버.js 파일에서 import해준다
        import를 위해선 export가 필요하다
        import를 할때의 이름은 아무렇게나 해줄 수 있지만 통상적으로 같은 이름을 사용한다
-----------------------------------------------------------------------------------
# 4.3 Exports
    (1) 라우터는 그저 url의 시작부분일 뿐이다
    (2) 따라서 users/edit과 같은 url로 가기 위해서는 express가 url을 보고
        /users로 시작하면 유저 라우터로 가서 express는 /edit을 찾는다
    (3) 페이지 수가 적으면 라우터안에서 각각 컨트롤러를 만들어줘도 되겠지만 페이지가 많아지면 힘들어진다
    (4) 따라서 라우터와 컨트롤러를 섞어서 쓰는건 좋지않다
    (5) 컨트롤러 폴더를 만들어서 컨트롤러를 따로 만들어준 후에 각각 라우터로 끌어온다
    (6) export default로는 한가지 밖에 export 할 수 없다
        따라서 파일안에 여러가지 컨트롤러가 있다면 이 방법으로는 따로따로 빼서 쓸 수 없다
        export default 하는 것과 각각의 변수를 export하는 것의 차이를 알아야한다
    (7) export const watch = (req, res) => res.send("Watch"); 와 같이 변수를 하나씩 export 해줄 수 있다
        이 때 import를 해줄 때는 오브젝트를 가져오는 것과 같이 가져온다
            가져올 때의 이름은 정해져있다 (라우터에 존재하는 것과 같은 이름)
-----------------------------------------------------------------------------------
# 4.4 Router Recap
    (1) Router를 사용하여 url을 받기 때문에 서버 파일에서 app.get()로 하나하나 url을 받지 않음
    (2) app.use를 사용하여 시작 url과 Router를 받음
    (3) 라우터는 url이 어떻게 시작하는지에 따라 나누는 방법이다 (url의 그룹화)
-----------------------------------------------------------------------------------
# 4.5 Architecture Recap
    (1) export에 디폴트를 붙이면 내가 어떻게 파일을 임포트하면 이름을 아무렇게나 지정해도 상관없다
    (2) 서버는 url이 어떻게 시작하는지에 따라 라우터를 설정하고
        라우터안에서 url을 완성하고
        라우터 안에서 컨트롤러를 임포트해서 불러낸다
-----------------------------------------------------------------------------------
# 4.6 Planning Routes
    (1) README.md 파일에 플랜을 짠다
    (2) 플랜을 짤 때에는 유저의 입장에서 짠다
-----------------------------------------------------------------------------------
# 4.7 URL parameters part One
    (1) :id 가 의미하는 것 (:뒤의 이름은 정해진것이 아니다)
        :id 은 parameter를 의미한다
        url안에 변수를 포함시킬 수 있게 해준다
        :를 붙이는 것으로 express한테 이게 변수라는걸 알려준다
        :를 붙여서 req를 보내면 express는 내가 정한 이름과 함께 값을 제공해준다
            request 안에 params 안 변수로 들어간다
    (2) 라우터가 위에서 아래로 진행되기 때문에 변수가 없는 url들을 위에 써줘야한다
        변수가 있던 주소와 충돌 하기 때문이다
        ex) videoRouter.get("/upload", upload);
            videoRouter.get("/:id", see);
            params의 타입을 지정해줘서 충돌을 피할 수는 있다
-----------------------------------------------------------------------------------
# 4.8 URL parameters part Two (parameter의 타입 지정)
    (1) 정규식
        1. (jung\w+)
            jung으로 시작하는 어느 단어든 선택
        2. (\d+)
            digit(숫자)만 선택 ex) get("/:id(\\d+)")
-----------------------------------------------------------------------------------