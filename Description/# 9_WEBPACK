-----------------------------------------------------------------------------------
# 9.0 Introduction to Webpack
    (1) JS로 프론트앤드를 작업한다
        브라우저에서 구동하는 JavaScript
    (2) WEBPACK
        백엔드 Javascript는 Babel Node가 다 처리해 준다
        프론트앤드 역시 이러한 과정이 필요하다 (Webpack)
            이러한 과정들은 보다 나은 코드를 사용하기 위함이다 (브라우저에게 이해시키기 위해서)
    (3) 현업에서는 Webpack을 잘 사용하지 않는다
        대부분 Webpack이 이미 포함되어 있는 툴들을 사용한다 (리액트, 리액트 네이티브 등 대부분의 프레임워크엔 Webpack이 내장되어 있다)
            하지만 업계 기준이고, 이게 어떻게 작동하는지, 뒤에서 무슨일이 일어나고 있는지 이해하고 있을 필요가 있다
    (4) Gulf는 Webpack보다 쉬운 대채제이다
        하지만 Webpack만큼 강력하지 않다
    1. 브라우저에서 작동할 Javascript와 CSS를 작성한다
        세련된 코드들을 사용
    2. 브라우저가 세련된 코드들을 이해할 수 있도록 브라우저가 이해할 수 있는 코드로 바꿔줘야 한다
        Webpack
-----------------------------------------------------------------------------------
# 9.1 Webpack Configuration part One
    (1) Webpack 과 Webpack CLI 를 설치한다 (front-end 코드에 필요한 것들)
        1. npm i webpack webpack-cli --save-dev (-D 로 압축가능)
            Webpack CLI 를 이용해서 콘솔에서 Webpack을 불러낼 수 있다
    (2) Webpack을 설정하기 위해서는 webpack.config.js라는 파일을 생성해야 한다
        이 파일은 굉장히 오래된 Javascript 코드만 이해할 수 있다
        두 가지 반드시 해야하는, 필수적인 것이 존재한다
            entry (소스코드를 의미. 내가 처리(변경)하고자 하는 파일), output (결과물. 파일명과 파일을 어디에 저장할지 지정해줘야 한다)
            configuration output 경로는 절대경로여야 한다
        내가 처리하고자 하는 파일들
        src 에 client 폴더를 만든다 (폴더 명은 상관x)
        client 폴더 안에 있는 코드들은 다 서버가 아니라 브라우저에서 실행될 거란걸 알 수 있다
        client 폴더 안에 js라는 폴더를 만들고 그 안에 js파일을 생성한다
        생성한 js 파일을 Webpack에 전달해야 한다
    (3) Webpack 을 실행시키기 위해서 package.json에 스크립트를 하나 만든다 
        "assets": "webpack --config webpack.config.js"
-----------------------------------------------------------------------------------
# 9.2 Webpack Configuration part Two
    (1) 절대 경로로 입력하는 것을 path.resolve()와 --dirname이 편하게 만들어 준다
        dirname 즉 directory name 은 말 그래도 파일까지의 경로 전체를 말한다
        path.resolve() 는 몇 개가 됐든 내가 입력하는 파트들을 모아서 경로로 만들어 준다
    (2) 이렇게 webpack.config.js 파일을 작성 후 실행하면 폴더가 생성된다
    (3) 이렇게 output 된 코드에 호환성을 추가해야 한다
        프론트엔드 코드에도 Babel을 적용시켜준다
            단 package.json 파일이 아닌 webpack.config.js 파일에서 한다
    (4) rules
        rules는 내가 각각의 파일 종류에 따라 어떤 전환을 할 건지 결정한다
    (5) babel-loader를 추가로 설치한다
        npm i -D babel-loader
            Documentation 참조
    (6) 이렇게 entry, output, rules, 그리고 변형할 파일에 대해서는 기억해 두는게 좋다
    (7) WARNING in configuration 'mode' option has not been set 을 없애기 위해서
        webpack한테 이 코드가 지금 개발중인지 아니면 완성품인지를 알려줘야 한다
            webpack이 output 할 때 코드를 압축해 버리기 때문.. 개발 중에는 압축없이 내가 어떻게 코드를 짜고있는지 봐야한다
            완성되면 mode를 production으로 바꿔줘야 한다
-----------------------------------------------------------------------------------
# 9.3 Webpack Configuration part Three
    (1) 이번 프로젝트에서는 client 폴더가 내가 코딩할 폴더, assets 폴더가 브라우저가 접근해서 볼 폴더이다
    (2) 서버는 아직 assets라는 폴더나 라우터가 있는 줄도 모른다
    (3) 따라서 Express한테 assets 안에 js 안에 main.js가 있다는 것을 알려줘야한다
        static
            app.use("/static", express.static("assets"));
                첫번째 인자는 그저 브라우저에게 알려주는 URL이다 static 안의 인자가 폴더명
    (4) 이제 assets/js/main.js 를 템플릿과 연결시켜야 한다
        템플릿 파일(base.pug)가 main.js를 불러 올 수 있도록
        탬플릿의 가장 아래에 script(src="/static/js/main.js") 추가
-----------------------------------------------------------------------------------
# 9.4 SCSS Loader
    (1) client 폴더에 SCSS라는 폴더를 생성한다
    (2) SCSS 폴더 안에 두개의 파일을 생성한다
        1. styles.scss
        2. _variable.scss
    (3) 이렇게 작성한 파일을 main.js 파일에 import 한다

    () sass-loader 는 scss 파일을 가져다가 css 파일로 전환시켜준다
        npm i sass-loader sass webpack -D 로 설치
    () css-loader 는 @import 와 ur() 을 풀어서 해석해준다
        npm i -D css-loader 로 설치
    () style-loader 는 css 를 DOM에 주입한다
        npm install -D style-loader 로 설치
    () scss 를 가져다가 일반적인 css로 변환하고, 보통 css를 가지고 프론트엔드에 적용시킨다
    () 로더들을 합쳐주는데 중요한건 제일 마지막 loader부터 시작해야 한다는 것이다 (역순)
        webpack이 뒤에서부터 시작하기 때문
    () 
        1. 실행하면 제일 먼저, webpack은 나의 entry 파일을 가져온다
        2. javascript라는걸 인식하면 babel을 이용해서 변환한다
        3. scss 파일이라는걸 인식하면 scss파일을 일반 css 파일로 바꾼다
        4. webpack이 직접 어떤 javascript 코드를 짠다
            그 javascript 코드가 웹사이트에 컴파일된 css를 입력하는 역할을 한다
-----------------------------------------------------------------------------------
# 9.5 MiniCssExtractPlugin
    (1) 진행 상황 복습
        1. main.js 를 수정했다
            javascript 만 있기 때문에 scss를 import 했다
            jsvascript 에서 import 하지 않았기 때문에 아직 작동하지 않는다
        2. 이 파일을 webpack 으로 바꾸면서 webpack이 scss코드를 가져와서 어떠한 loader 들을 통해
            실행할 수 있도록 설정했다
                그 loader는 sass-loader, css-loader, style-loader 다
                    style-loader 는 css code를 브라우저에 적용하는 역할을 한다
                loader 는 적힌 반대 순서로 작동한다
        3. 하지만 style-loader 를 더 이상 사용하지 않을 것이다
        4. javascript에서 css가 적용되는 것이 아닌, 분리된 css파일을 만들 것이다
            그걸 위해 MiniCssExtractPlugin 을 사용한다
                해당 코드를 다른 파일로 분리시키는 역할을 한다
            npm i -D mini-css-extract-plugin 으로 설치
        5. webpack.config.js 파일에 const MiniCssExtractPlugin = require("mini-css-extract-plugin"); 로 가져오고
            plugins: [new MiniCssExtractPlugin()], 을 추가
                공식 문서 참조
                    rules의 style-loader를 대체
        6. 실행하면 assets/js 폴더안에 main.css 파일이 생성된 것을 볼 수 있다
        7. output을 살짝 수정한다
            filename은 그대로 두고, output 을 수정한다
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------